body {
  margin: 0;
  padding: 0;
  background: linear-gradient(white, orange);
  height: 2000px;
}
div {
  width: 100px;
  height: 100px;
  font-weight: 700;
  text-align: center;
  line-height: 100px;
}
/* position- static (default) */
/*
  - 기본값이기 때문에 작성하지 않아도 됨(주석처리를 하던 안하던 결과 동일
  - inline 요소라면 왼쭉에서 오른쭉으로 쌓임
  -block 요소라면 위에서 아래로 쌓임 */
.position-static {
  /* position-static */
  background-color: pink;
}
/* position-relative: -> 상대 위치 */
/* 일반적인 흐림에 따라 배치하되 , top, bottom, left, right 속성을 사용해 위치 지정 */
/*
  - 자신 원래 있어야 하는 위치 기존
  - top: 위에서부터 의 여백;
  -bottom : 아래에서부터 여백;
  -right: 오른쭉으로 부터 여백;
  -left: 왼쭉부터 여백;
   */
.position-relative {
  background-color: lightblue;
  position: relative;
  /* left: 100px; */
  /* top: 50px; */
  bottom: 30px;
  right: 15px;
}
/* position-absolute : -> 절대 위치 */
/*
  - 기중점
     -position static이 아닌 값을 가지는 제일 가까운 조상 기준
     - 만약 position : static이 아닌 값을 가지는 조사이 없다면 viewport 를 기존
     특성 요소를 기준 삼아 top, bottom, left, right 속성을 지저함
  */
/* 문서 흐림을 벗어남 -> 자기 자리가 사라짐 */
.position-absolute {
  background-color: gold;
  position: absolute;
  top: 0;
}
/* position-fixed: -> 고정 위치  */
/*  -viewport 기존으로 특정 위치로 지정됨
      - 스크롤 되어도 움직이지 않음 -> header, top-button 재작 시 많이 사용
      -top, bottom, left, right 속성 중 하나 이상을 해주셔야 하나 이상을 지정 */
.position-fixed {
  background-color: coral;
  position: fixed;
  bottom: 30px;
  right: 30px;
}
/* position-sticky: -> top 속성의 위치에 도달했을때 부터 해당 위치에 고정 */
/*
    - 부모 요소 내에서만 sticky 작동함-> html 구조 매우 중요 */
.position-sticky {
  background-color: palegreen;
  position: sticky;
  top: 0; /* 뷰포트의 최상단네 도달했을 때 고정 */
}
.sticky-container {
  height: 1200px;
  width: 100vw;
  background: linear-gradient(lightblue, lightpink);
}
.container {
  width: 500px;
  height: 500px;
  background-color: azure;
}
.item1 {
  background-color: bisque;
  position: relative;
  left: 50px;
  top: 30px;
  width: 100px;
  height: 100px;
}
.item2 {
  background-color: blueviolet;
  position: fixed;
  right: 30px;
  bottom: 100px;
  width: 100px;
  height: 100px;
}
.item3 {
  background-color: aqua;
  position: sticky;
  right: 100px;
  top: 100px;
  width: 100px;
  height: 100px;
}

.infut {
  height: 50px;
  background-color: aliceblue;
  border: none;
  border-radius: 25px;
  background-image: ;
  background-size: 30px;
  background-repeat: no-repeat;
  background-position: 15px 10px;
  padding: 0 15px 0 10px;
  font-size: 20px;
}
.infut:focus {
  outline: none;
}
.infut:hover:not(.infut:focus) {
  background-color: azure;
}

.parent {
  position: relative;
}

.circle {
  width: 100px;
  height: 100px;
  border-radius: 50%;
  position: absolute;
}

.circle1 {
  background-color: #9afaff;
  top: 0;
  left: 200px;
}

.circle2 {
  background-color: #84ff8d;
  top: 0;
  left: 150px;
}

.circle3 {
  background-color: #ffeb88;
  top: 0;
  left: 100px;
  z-index: 999;
}

.circle4 {
  background-color: #ffb680;
  top: 0;
  left: 50px;
  z-index: 2;
}

.circle5 {
  top: 0;
  left: 0;
  background-color: #ff7c7c;
}

.container {
  width: 500px;
  height: 500px;
  position: relative;
}
.container > * {
  width: 100px;
  height: 100px;
  position: absolute;
}
.item1 {
  background-color: #ff7c7c;
}
.item2 {
  background-color: #ffeb88;
  top: 30px;
  left: 30px;
}
.item2 {
  background-color: antiquewhite;
  top: 60px;
  left: 60px;
}
.item3 {
  background-color: beige;
  top: 30px;
  left: 30px;
}
